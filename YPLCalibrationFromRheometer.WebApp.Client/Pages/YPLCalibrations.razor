@page "/YPLCalibrations"
@inject ILogger<YPLCalibrations> logger

<h1>YPLCalibrations</h1>
<div hidden="@IsHidSubPanel">
    <div>
        <table class="table">
            <thead>
                <tr>
                    <td>Name</td>
                    <td>Description</td>
                    <td></td>
                </tr>
            </thead>
            <tbody>
                @if (IsHidInputAdd)
                {
                    <tr>
                        <td>
                            <span class="label">@(yplCalibrationList[yplCalibrationIdx].Name)</span>
                        </td>
                        <td>
                            <span class="label">@(yplCalibrationList[yplCalibrationIdx].Description)</span>
                        </td>
                        <td></td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td>
                            <input class="text" type="text" size="50" @bind="@updatedYplCalibrationName" />
                        </td>
                        <td>
                            <input class="text" type="text" size="50" @bind="@updatedYplCalibrationDescr" />
                        </td>
                        <td align="right">
                            <button class="btn btn-primary" @onclick="@(() => Update(yplCalibrationIdx))">Update</button>
                            <button class="btn btn-primary" @onclick="@(() => Cancel(yplCalibrationIdx))">Cancel</button>
                        </td>
                    </tr>
                }
            </tbody>
            <tfoot>
            </tfoot>
        </table>
    </div>
</div>

@if (yplCalibrationList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div hidden="@IsHidMainPanel">
        <table class="table">
            <thead>
                <tr>
                    <td>Name</td>
                    <td>Description</td>
                    <td></td>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < yplCalibrationList.Count; i++)
                {
                    var local_i = i; // Do not use a loop variable directly in a lambda expression
                    <tr>
                        <td>
                            <span class="label">@yplCalibrationList[i].Name</span>
                        </td>
                        <td>
                            <span class="label">@yplCalibrationList[i].Description</span>
                        </td>
                        <td align="right">
                            <button class="btn btn-primary" @onclick="@(() => Edit(local_i))">Edit</button>
                            <button class="btn btn-primary" @onclick="@(() => Delete(local_i))">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <td>
                        <input class="text" type="text" size="50" @bind="@addedYplCalibrationName" />
                    </td>
                    <td>
                        <input class="text" type="text" size="50" @bind="@addedYplCalibrationDescr" />
                    </td>
                    <td align="right">
                        <button class="btn btn-primary" @onclick="@(() => Add())">Add</button>
                        <button class="btn btn-primary" @onclick="@(() => Cancel())">Cancel</button>
                    </td>
                </tr>
            </tfoot>
        </table>
    </div>
    @if (yplCalibrationIdx >= 0)
    {
        int inputIterData1Count = yplCalibrationList[yplCalibrationIdx].RheogramInput.RheometerMeasurementList.Count;
        <div hidden="@IsHidSubPanel">
            <div>
                <button class="btn btn-link" @onclick="@(() => HideInput())"><h2>Input Rheogram</h2></button>
                <div hidden="@IsHidInputPanel">
                    <table class="table">
                        <thead></thead>
                        <tbody>
                            <tr>
                                <td>
                                    <select @bind="@rheogramID">
                                        @foreach (Rheogram baseData1 in rheogramList)
                                        {
                                            <option value="@baseData1.ID">@baseData1.Name</option>
                                        }
                                    </select>
                                </td>
                                <td align="right">
                                    <button class="btn btn-primary" @onclick="@(() => UpdateInput())">Update</button>
                                </td>
                            </tr>
                        </tbody>
                        <tfoot></tfoot>
                    </table>
                    <p>Warning, any change made to this Rheogram will be sent to the database and thus will affect other YPLCalibrations which refer to it</p>
                    <table class="table">
                        <thead>
                            <tr>
                                <td>ShearRate (1/s)</td>
                                <td>ShearStress (Pa)</td>
                                <td></td>
                            </tr>
                        </thead>
                        <tbody>
                            @if (inputIterData1Count > 0)
                            {
                                @for (int j = 0; j < inputIterData1Count; j++)
                                {
                                    var local_j = j; // defined because loop variables cannot be used directly in a lambda expression (see below)
                                    var inputIterData1 = yplCalibrationList[yplCalibrationIdx].RheogramInput.RheometerMeasurementList.ElementAt(j);
                                    @if (inputIterData1 != null)
                                    {
                                        @if (IsHidInputAdd && j == rowIndex)
                                        {
                                            <tr>
                                                <td>
                                                    <input class="text" type="text" size="10" @bind="@updatedShearRate" />
                                                </td>
                                                <td>
                                                    <input class="text" type="text" size="10" @bind="@updatedShearStress" />
                                                </td>
                                                <td align="right">
                                                    @if (local_j > -1)
                                                    {
                                                        <button class="btn btn-primary" @onclick="@(() => UpdateRheometerMeasurement(local_j))">Update</button>
                                                        <button class="btn btn-primary" @onclick="@(() => CancelRheometerMeasurement(local_j))">Cancel</button>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                        else
                                        {
                                            <tr>
                                                <td>
                                                    <span class="label">@(inputIterData1.ShearRate)</span>
                                                </td>
                                                <td>
                                                    <span class="label">@(inputIterData1.ShearStress)</span>
                                                </td>
                                                <td align="right">
                                                    @if (!IsHidInputAdd)
                                                    {
                                                        <button class="btn btn-primary" @onclick="@(() => EditRheometerMeasurement(local_j))">Edit</button>
                                                        <button class="btn btn-primary" @onclick="@(() => DeleteRheometerMeasurement(local_j))">Delete</button>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    }
                                }
                            }
                        </tbody>
                        <tfoot hidden="@IsHidInputAdd">
                            <tr>
                                <td>
                                    <input class="text" type="text" size="10" @bind="@addedShearRate" />
                                </td>
                                <td>
                                    <input class="text" type="text" size="10" @bind="@addedShearStress" />
                                </td>
                                <td align="right">
                                    <button class="btn btn-primary" @onclick="@(() => AddRheometerMeasurement())">Add</button>
                                    <button class="btn btn-primary" @onclick="@(() => CancelRheometerMeasurement())">Cancel</button>
                                </td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
            <div>
                <button class="btn btn-link" @onclick="@(() => HideCalc())"><h2>YPLModel Mullineux</h2></button>
                <table class="table" hidden="@IsHidCalcPanel">
                    <thead>
                        <tr>
                            <td>Tau0 (Pa)</td>
                            <td>K (Pa.s^n)</td>
                            <td>n (1)</td>
                            <td>Chi2 (1)</td>
                            <td></td>
                        </tr>
                    </thead>
                    <tbody>
                        @if (yplCalibrationList[yplCalibrationIdx].YPLModelMullineux != null)
                        {
                            <tr>
                                <td>
                                    <span class="label">@(yplCalibrationList[yplCalibrationIdx].YPLModelMullineux.Tau0)</span>
                                </td>
                                <td>
                                    <span class="label">@(yplCalibrationList[yplCalibrationIdx].YPLModelMullineux.K)</span>
                                </td>
                                <td>
                                    <span class="label">@(yplCalibrationList[yplCalibrationIdx].YPLModelMullineux.N)</span>
                                </td>
                                <td>
                                    <span class="label">@(yplCalibrationList[yplCalibrationIdx].YPLModelMullineux.Chi2)</span>
                                </td>
                                <td></td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                    </tfoot>
                </table>
            </div>
            <div>
                <button class="btn btn-link" @onclick="@(() => HideCalc())"><h2>YPLModel Kelessidis</h2></button>
                <table class="table" hidden="@IsHidCalcPanel">
                    <thead>
                        <tr>
                            <td>Tau0 (Pa)</td>
                            <td>K (Pa.s^n)</td>
                            <td>n (1)</td>
                            <td>Chi2 (1)</td>
                            <td></td>
                        </tr>
                    </thead>
                    <tbody>
                        @if (yplCalibrationList[yplCalibrationIdx].YPLModelKelessidis != null)
                        {
                            <tr>
                                <td>
                                    <span class="label">@(yplCalibrationList[yplCalibrationIdx].YPLModelKelessidis.Tau0)</span>
                                </td>
                                <td>
                                    <span class="label">@(yplCalibrationList[yplCalibrationIdx].YPLModelKelessidis.K)</span>
                                </td>
                                <td>
                                    <span class="label">@(yplCalibrationList[yplCalibrationIdx].YPLModelKelessidis.N)</span>
                                </td>
                                <td>
                                    <span class="label">@(yplCalibrationList[yplCalibrationIdx].YPLModelKelessidis.Chi2)</span>
                                </td>
                                <td></td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                    </tfoot>
                </table>
            </div>
            <div>
                <button class="btn btn-link" @onclick="@(() => HideCalc())"><h2>YPLModel Levenberg-Marquradt</h2></button>
                <table class="table" hidden="@IsHidCalcPanel">
                    <thead>
                        <tr>
                            <td>Tau0 (Pa)</td>
                            <td>K (Pa.s^n)</td>
                            <td>n (1)</td>
                            <td>Chi2 (1)</td>
                            <td></td>
                        </tr>
                    </thead>
                    <tbody>
                        @if (yplCalibrationList[yplCalibrationIdx].YPLModelLevenbergMarquardt != null)
                        {
                            <tr>
                                <td>
                                    <span class="label">@(yplCalibrationList[yplCalibrationIdx].YPLModelLevenbergMarquardt.Tau0)</span>
                                </td>
                                <td>
                                    <span class="label">@(yplCalibrationList[yplCalibrationIdx].YPLModelLevenbergMarquardt.K)</span>
                                </td>
                                <td>
                                    <span class="label">@(yplCalibrationList[yplCalibrationIdx].YPLModelLevenbergMarquardt.N)</span>
                                </td>
                                <td>
                                    <span class="label">@(yplCalibrationList[yplCalibrationIdx].YPLModelLevenbergMarquardt.Chi2)</span>
                                </td>
                                <td></td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                    </tfoot>
                </table>
            </div>
        </div>
    }
}

@code {
    // http client
    private HttpClient httpClient;

    // html booleans for dynamic visualization
    private bool IsHidMainPanel = false;
    private bool IsHidSubPanel = true;
    private bool IsHidInputPanel = true;
    private bool IsHidInputAdd = false;
    private bool IsHidCalcPanel = true;

    // model data objects
    private List<YPLCalibration> yplCalibrationList;
    private List<Rheogram> rheogramList;

    // UI binding variables
    private string addedYplCalibrationName = null;
    private string addedYplCalibrationDescr = null;
    private string updatedYplCalibrationName = null;
    private string updatedYplCalibrationDescr = null;
    private double? addedShearRate = null;
    private double? addedShearStress = null;
    private double? updatedShearRate = null;
    private double? updatedShearStress = null;

    // variables identifying user's selected objects
    private int yplCalibrationIdx = -1; // the index of the selected YPLCalibration
    private Guid yplCalibrationID = Guid.Empty;
    private Guid rheogramID = Guid.Empty;
    private int rowIndex = -1; // the index of the row selected in the Input panel

    protected override async Task OnInitializedAsync()
    {
        try
        {
            string host = YPLCalibrationFromRheometer.WebApp.Client.Configuration.YPLCalibrationHostURL;
            logger.LogInformation("Trying to load YPLCalibrations from client: " + host);
            SetHttpClient(host);
            yplCalibrationList = await LoadYPLCalibrations();
            if (yplCalibrationList != null)
                rheogramList = await LoadRheograms();
        }
        catch (Exception ex)
        {
            httpClient = null;
            logger.LogError(ex, "Impossible to load YPLCalibrations or Rheograms on initialization");
        }
    }

    private void SetHttpClient(string host)
    {
        httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri(host + "YPLCalibrationFromRheometer/api/");
        httpClient.DefaultRequestHeaders.Accept.Clear();
        httpClient.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    }

    private async Task<List<YPLCalibration>> LoadYPLCalibrations()
    {
        bool success = false;
        try
        {
            var a = await httpClient.GetAsync("YPLCalibrations");
            if (a.IsSuccessStatusCode)
            {
                Guid[] ids = null;
                string str = await a.Content.ReadAsStringAsync();
                if (!string.IsNullOrEmpty(str))
                    ids = Newtonsoft.Json.JsonConvert.DeserializeObject<Guid[]>(str);
                this.yplCalibrationList = new List<YPLCalibration>();
                YPLCalibration calculationData = null;
                for (int i = 0; i < ids.Length; i++)
                {
                    a = await httpClient.GetAsync("YPLCalibrations/" + ids[i].ToString());
                    if (a.IsSuccessStatusCode && a.Content != null)
                    {
                        str = await a.Content.ReadAsStringAsync();
                        if (!string.IsNullOrEmpty(str))
                        {
                            calculationData = JsonConvert.DeserializeObject<YPLCalibration>(str);
                            if (calculationData == null)
                                throw new NullReferenceException("Impossible to deserialize YPLCalibration string:" + str);
                            this.yplCalibrationList.Add(calculationData);
                        }
                    }
                }
                if (this.yplCalibrationList.Count != ids.Length)
                    throw new Exception("Inconsistent count of YPLCalibration-loaded IDs and loaded YPLCalibrations.");
                success = true;
            }
            else
            {
                logger.LogWarning("Impossible to get YPLCalibrations from controller");
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Impossible to load YPLCalibrations");
        }
        if (success)
        {
            yplCalibrationList.Sort((yplc1, yplc2) => yplc1.Name.CompareTo(yplc2.Name));
            logger.LogInformation("Loaded YPLCalibrations successfully");
            return yplCalibrationList;
        }
        else
        {
            logger.LogWarning("Impossible to load YPLCalibrations");
            return null;
        }
    }

    private async Task<List<Rheogram>> LoadRheograms()
    {
        bool success = false;
        try
        {
            var a = await httpClient.GetAsync("Rheograms");
            if (a.IsSuccessStatusCode)
            {
                Guid[] ids = null;
                string str = await a.Content.ReadAsStringAsync();
                if (!string.IsNullOrEmpty(str))
                {
                    ids = Newtonsoft.Json.JsonConvert.DeserializeObject<Guid[]>(str);
                }
                rheogramList = new List<Rheogram>();
                Rheogram baseData1 = null;
                for (int i = 0; i < ids.Length; i++)
                {
                    a = await httpClient.GetAsync("Rheograms/" + ids[i].ToString());
                    if (a.IsSuccessStatusCode && a.Content != null)
                    {
                        str = await a.Content.ReadAsStringAsync();
                        if (!string.IsNullOrEmpty(str))
                        {
                            baseData1 = JsonConvert.DeserializeObject<Rheogram>(str);
                            if (baseData1 == null)
                                throw new NullReferenceException("Impossible to deserialize baseData1 string:" + str);
                            rheogramList.Add(baseData1);
                        }
                    }
                }
                if (rheogramList.Count != ids.Length)
                    throw new Exception("Inconsistent count of Rheogram-loaded IDs and loaded Rheograms.");
                success = true;
            }
            else
            {
                logger.LogWarning("Impossible to get Rheograms from controller");
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Impossible to load Rheograms");
        }
        if (success)
        {
            rheogramList.Sort((rheo1, rheo2) => rheo1.Name.CompareTo(rheo2.Name));
            logger.LogInformation("Loaded Rheograms successfully");
            return rheogramList;
        }
        else
        {
            logger.LogWarning("Impossible to load Rheograms");
            return null;
        }
    }

    private void Edit(int idx)
    {
        if (yplCalibrationList != null && idx >= 0 && idx < yplCalibrationList.Count)
        {
            yplCalibrationIdx = idx;
            yplCalibrationID = yplCalibrationList[idx].ID;
            updatedYplCalibrationName = yplCalibrationList[idx].Name;
            updatedYplCalibrationDescr = yplCalibrationList[idx].Description;
            rheogramID = yplCalibrationList[idx].RheogramInput.ID;
            IsHidMainPanel = true;
            IsHidSubPanel = false;
        }
    }

    private async void Delete(int idx)
    {
        if (yplCalibrationList != null && idx >= 0 && idx < yplCalibrationList.Count && yplCalibrationList[idx] != null && !yplCalibrationList[idx].ID.Equals(System.Guid.Empty))
        {
            // delete YPLCalibration from database (output children are implicitly deleted from their database)
            var a = await httpClient.DeleteAsync("YPLCalibrations/" + yplCalibrationList[idx].ID);
            if (a.IsSuccessStatusCode)
            {
                await OnInitializedAsync();
                await InvokeAsync(() => { StateHasChanged(); });
            }
            else
            {
                logger.LogWarning("Impossible to delete the selected YPLCalibration");
            }
        }
    }

    private async void Update(int idx)
    {
        if (yplCalibrationList != null && idx >= 0 && idx < yplCalibrationList.Count && !yplCalibrationList[idx].ID.Equals(System.Guid.Empty) && !string.IsNullOrEmpty(updatedYplCalibrationName))
        {
            yplCalibrationList[idx].Name = updatedYplCalibrationName;
            yplCalibrationList[idx].Description = updatedYplCalibrationDescr;

            // PUT YPLCalibration into the YPLCalibrationsTable (calculation is performed and output children database is also updated)
            StringContent content = new StringContent(yplCalibrationList[idx].GetJson(), Encoding.UTF8, "application/json");
            var a = await httpClient.PutAsync("YPLCalibrations/" + yplCalibrationList[idx].ID, content);
            if (a.IsSuccessStatusCode)
            {
                updatedYplCalibrationName = null;
                updatedYplCalibrationDescr = null;

                IsHidMainPanel = false;
                IsHidSubPanel = true;
                yplCalibrationIdx = -1;
                rheogramID = Guid.Empty;

                await OnInitializedAsync();
                await InvokeAsync(() => { StateHasChanged(); });
            }
            else
            {
                logger.LogWarning("Impossible to update the current YPLCalibration");
            }
        }
    }

    private void Cancel(int idx)
    {
        if (yplCalibrationList != null && idx >= 0 && idx < yplCalibrationList.Count)
        {
            IsHidMainPanel = false;
            IsHidSubPanel = true;
            yplCalibrationIdx = -1;
        }
    }

    private async void Add()
    {
        if (!string.IsNullOrEmpty(addedYplCalibrationName) && rheogramList != null && rheogramList.Count > 0)
        {
            YPLCalibration addedYplCalibration = new YPLCalibration();
            addedYplCalibration.ID = Guid.NewGuid();
            addedYplCalibration.Name = addedYplCalibrationName;
            addedYplCalibration.Description = addedYplCalibrationDescr;
            addedYplCalibration.RheogramInput = rheogramList[0]; // by default, the first available Rheogram is used as input
            addedYplCalibration.YPLModelKelessidis = new YPLModel();
            addedYplCalibration.YPLModelKelessidis.ID = Guid.NewGuid();
            addedYplCalibration.YPLModelKelessidis.Name = addedYplCalibration.Name + "-calculated-Kelessidis";
            addedYplCalibration.YPLModelMullineux = new YPLModel();
            addedYplCalibration.YPLModelMullineux.ID = Guid.NewGuid();
            addedYplCalibration.YPLModelMullineux.Name = addedYplCalibration.Name + "-calculated-Mullineux";
            addedYplCalibration.YPLModelLevenbergMarquardt = new YPLModel();
            addedYplCalibration.YPLModelLevenbergMarquardt.ID = Guid.NewGuid();
            addedYplCalibration.YPLModelLevenbergMarquardt.Name = addedYplCalibration.Name + "-calculated-Levenberg";

            // POST the YPLCalibration (note that it adds RheogramInput to the input database, triggers the CalculateOutputRheogram() method and adds the corresponding output to the output database)
            StringContent content = new StringContent(addedYplCalibration.GetJson(), Encoding.UTF8, "application/json");
            var a = await httpClient.PostAsync("YPLCalibrations", content);
            if (a.IsSuccessStatusCode)
            {
                addedYplCalibrationName = null;
                addedYplCalibrationDescr = null;

                await OnInitializedAsync();
                await InvokeAsync(() => { StateHasChanged(); });
            }
            else
            {
                logger.LogWarning("Impossible to add the current YPLCalibration");
            }
        }
    }

    private void Cancel()
    {
        // empty UI edit box
        addedYplCalibrationName = null;
        addedYplCalibrationDescr = null;
    }

    private async void UpdateInput()
    {
        try
        {
            // first GET the selected Rheogram
            Rheogram rheogram = null;
            var a = await httpClient.GetAsync("Rheograms/" + rheogramID.ToString());
            if (a.IsSuccessStatusCode && a.Content != null)
            {
                string str = await a.Content.ReadAsStringAsync();
                if (!string.IsNullOrEmpty(str))
                {
                    rheogram = JsonConvert.DeserializeObject<Rheogram>(str);
                    if (rheogram == null)
                        throw new NullReferenceException("Impossible to deserialize Rheogram string:" + str);
                    yplCalibrationList[yplCalibrationIdx].RheogramInput = rheogram;

                    // then PUT the YPLCalibration with an updated RheogramInput value
                    StringContent content = new StringContent(yplCalibrationList[yplCalibrationIdx].GetJson(), Encoding.UTF8, "application/json");
                    a = await httpClient.PutAsync("YPLCalibrations/" + yplCalibrationID.ToString(), content);
                    if (a.IsSuccessStatusCode)
                    {
                        await OnInitializedAsync();
                        await InvokeAsync(() => { StateHasChanged(); });
                    }
                    else
                    {
                        logger.LogWarning("Impossible to update the current YPLCalibration");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Impossible to update the current YPLCalibration");
        }
    }

    private void EditRheometerMeasurement(int rowIdx)
    {
        rowIndex = rowIdx;
        IsHidInputAdd = true;
        updatedShearRate = yplCalibrationList[yplCalibrationIdx].RheogramInput.RheometerMeasurementList.ElementAt(rowIdx).ShearRate;
        updatedShearStress = yplCalibrationList[yplCalibrationIdx].RheogramInput.RheometerMeasurementList.ElementAt(rowIdx).ShearStress;
    }

    private async void DeleteRheometerMeasurement(int rowIdx)
    {
        if (yplCalibrationList[yplCalibrationIdx] != null && yplCalibrationList[yplCalibrationIdx].RheogramInput != null &&
            !yplCalibrationList[yplCalibrationIdx].RheogramInput.ID.Equals(Guid.Empty))
        {
            int iterData1Count = yplCalibrationList[yplCalibrationIdx].RheogramInput.RheometerMeasurementList.Count;
            if (iterData1Count > 0)
            {
                rowIndex = rowIdx;
                // remove the RheometerMeasurement to be deleted
                RheometerMeasurement rheometerMeasurement = yplCalibrationList[yplCalibrationIdx].RheogramInput.RheometerMeasurementList.ElementAt(rowIdx);
                if (rheometerMeasurement != null)
                {
                    if (yplCalibrationList[yplCalibrationIdx].RheogramInput.RheometerMeasurementList.Remove(rheometerMeasurement))
                    {
                        // finally update the Rheogram (all dependent YPLCorrections will be updated by the RheogramsController)
                        StringContent content = new StringContent(yplCalibrationList[yplCalibrationIdx].RheogramInput.GetJson(), Encoding.UTF8, "application/json");
                        var a = await httpClient.PutAsync("Rheograms/" + yplCalibrationList[yplCalibrationIdx].RheogramInput.ID.ToString(), content);
                        if (a.IsSuccessStatusCode)
                        {
                            await OnInitializedAsync();
                            await InvokeAsync(() => { StateHasChanged(); });
                        }
                        else
                        {
                            logger.LogWarning("Impossible to update the current Rheogram");
                        }
                    }
                    else
                    {
                        logger.LogWarning("Impossible to remove the current RheometerMeasurement");
                    }
                }
                else
                {
                    logger.LogWarning("Impossible to retrieve the selected RheometerMeasurement");
                }
            }
            else
            {
                logger.LogWarning("No RheometerMeasurement to retrieve");
            }
        }
        else
        {
            logger.LogWarning("The current YPLCalibration is null or some of its attributes are null or badly identified");
        }
    }

    private async void UpdateRheometerMeasurement(int rowIdx)
    {
        if (yplCalibrationList[yplCalibrationIdx] != null && yplCalibrationList[yplCalibrationIdx].RheogramInput != null &&
            !yplCalibrationList[yplCalibrationIdx].RheogramInput.ID.Equals(Guid.Empty))
        {
            int iterData1Count = yplCalibrationList[yplCalibrationIdx].RheogramInput.RheometerMeasurementList.Count;
            if (iterData1Count > 0)
            {
                rowIndex = rowIdx;
                // collect values from UI
                if (updatedShearRate.HasValue)
                {
                    yplCalibrationList[yplCalibrationIdx].RheogramInput.RheometerMeasurementList.ElementAt(rowIdx).ShearRate = (double)updatedShearRate;
                    yplCalibrationList[yplCalibrationIdx].RheogramInput.RheometerMeasurementList.ElementAt(rowIdx).ShearStress = (double)updatedShearStress;
                }

                // then refresh the UI
                updatedShearRate = null;
                updatedShearStress = null;
                IsHidInputAdd = false;
                rowIndex = -1;

                // finally update the Rheogram (all dependent YPLCorrections will be updated by the RheogramsController)
                StringContent content = new StringContent(yplCalibrationList[yplCalibrationIdx].RheogramInput.GetJson(), Encoding.UTF8, "application/json");
                var a = await httpClient.PutAsync("Rheograms/" + yplCalibrationList[yplCalibrationIdx].RheogramInput.ID.ToString(), content);
                if (a.IsSuccessStatusCode)
                {
                    await OnInitializedAsync();
                    await InvokeAsync(() => { StateHasChanged(); });
                }
                else
                {
                    logger.LogWarning("Impossible to update the current YPLCalibration");
                }
            }
            else
            {
                logger.LogWarning("No RheometerMeasurement to retrieve");
            }
        }
        else
        {
            logger.LogWarning("The current YPLCalibration is null or some of its attributes are null or badly identified");
        }
    }

    private void CancelRheometerMeasurement(int rowIdx)
    {
        // rowIndex is just used to make the distinction with the no-argument overload
        IsHidInputAdd = false;
        rowIndex = -1;
        // empty UI edit boxes
        updatedShearRate = null;
        updatedShearStress = null;
    }

    private async void AddRheometerMeasurement()
    {
        if (yplCalibrationList[yplCalibrationIdx] != null && yplCalibrationList[yplCalibrationIdx].RheogramInput != null &&
            !yplCalibrationList[yplCalibrationIdx].RheogramInput.ID.Equals(Guid.Empty))
        {
            RheometerMeasurement addedTplIterData1 = new RheometerMeasurement(); // attribute must be set separately because non-empty constructors cannot be passed through the ModelClientShared json conversion mechanism
            if (addedShearRate.HasValue)
            {
                addedTplIterData1.ShearRate = (double)addedShearRate; // else unchanged
                addedTplIterData1.ShearStress = (double)addedShearStress; // else unchanged
            }

            yplCalibrationList[yplCalibrationIdx].RheogramInput.RheometerMeasurementList.Add(addedTplIterData1);

            // update the UI
            addedShearRate = null;
            addedShearStress = null;

            // finally update the RheogramInput (all dependent YPLCalibrations will be updated by the RheogramsController)
            StringContent content = new StringContent(yplCalibrationList[yplCalibrationIdx].RheogramInput.GetJson(), Encoding.UTF8, "application/json");
            var a = await httpClient.PutAsync("Rheograms/" + yplCalibrationList[yplCalibrationIdx].RheogramInput.ID.ToString(), content);
            if (a.IsSuccessStatusCode)
            {
                await OnInitializedAsync();
                await InvokeAsync(() => { StateHasChanged(); });
            }
            else
            {
                logger.LogWarning("Impossible to update the current YPLCalibration");
            }
        }
        else
        {
            logger.LogWarning("The current YPLCalibration is null or some of its attributes are null or badly identified");
        }
    }

    private void CancelRheometerMeasurement()
    {
        // empty UI edit boxes
        addedShearRate = null;
        addedShearStress = null;
    }

    private void HideInput()
    {
        IsHidInputPanel = !IsHidInputPanel;
    }

    private void HideCalc()
    {
        IsHidCalcPanel = !IsHidCalcPanel;
    }
}
