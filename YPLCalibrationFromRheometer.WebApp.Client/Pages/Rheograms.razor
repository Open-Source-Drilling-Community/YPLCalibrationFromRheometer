@page "/Rheograms"
@using System.Text
@using YPLCalibrationFromRheometer.ModelClientShared
@using Newtonsoft.Json
@using System.Diagnostics
@using Microsoft.Extensions.Logging
@inject ILogger<Rheograms> logger

<h1>Rheograms</h1>
<p>Warning, any change made to the Rheogram's listed below may affect YPLCalibrations which refer to it</p>
<div hidden="@IsHidSubPanel">
    <div>
        <table class="table">
            <thead>
                <tr>
                    <td>Name</td>
                    <td>Description</td>
                    <td>Shear stress standard deviation (Pa)</td>
                    <td></td>
                </tr>
            </thead>
            <tbody>
                @if (IsHidInputAdd)
                {
                    <tr>
                        <td>
                            <span class="label">@(rheogramList[rheogramIdx].Name)</span>
                        </td>
                        <td>
                            <span class="label">@(rheogramList[rheogramIdx].Description)</span>
                        </td>
                        <td>
                            <span class="label">@(rheogramList[rheogramIdx].ShearStressStandardDeviation)</span>
                        </td>
                        <td></td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td>
                            <input class="text" type="text" size="50" @bind="@updatedRheogramName" />
                        </td>
                        <td>
                            <input class="text" type="text" size="50" @bind="@updatedRheogramDescr" />
                        </td>
                        <td>
                            <input class="text" type="text" size="10" @bind="@updatedRheogramStdStress" />
                        </td>
                        <td align="right">
                            <button class="btn btn-primary" @onclick="@(() => Update(rheogramIdx))">Update</button>
                            <button class="btn btn-primary" @onclick="@(() => Cancel(rheogramIdx))">Cancel</button>
                        </td>
                    </tr>
                }
            </tbody>
            <tfoot>
            </tfoot>
        </table>
    </div>
</div>

@if (rheogramList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div hidden="@IsHidMainPanel">
        <table class="table">
            <thead>
                <tr>
                    <td>Name</td>
                    <td>Description</td>
                    <td>Shear stress standard deviation (Pa)</td>
                    <td></td>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < rheogramList.Count; i++)
                {
                    var local_i = i; // Do not use a loop variable directly in a lambda expression
                    <tr>
                        <td>
                            <span class="label">@rheogramList[i].Name</span>
                        </td>
                        <td>
                            <span class="label">@(rheogramList[i].Description)</span>
                        </td>
                        <td>
                            <span class="label">@(rheogramList[i].ShearStressStandardDeviation)</span>
                        </td>
                        <td align="right">
                            <button class="btn btn-primary" @onclick="@(() => Edit(local_i))">Edit</button>
                            <button class="btn btn-primary" @onclick="@(() => Delete(local_i))">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <td>
                        <input class="text" type="text" size="50" @bind="@addedRheogramName" />
                    </td>
                    <td>
                        <input class="text" type="text" size="50" @bind="@addedRheogramDescr" />
                    </td>
                    <td>
                        <input class="text" type="text" size="10" @bind="@addedRheogramStdStress" />
                    </td>
                    <td align="right">
                        <button class="btn btn-primary" @onclick="@(() => Add())">Add</button>
                        <button class="btn btn-primary" @onclick="@(() => Cancel())">Cancel</button>
                    </td>
                </tr>
            </tfoot>
        </table>
    </div>
    @if (rheogramIdx >= 0)
    {
        int inputIterData1Count = rheogramList[rheogramIdx].RheometerMeasurementList.Count;
        <div hidden="@IsHidSubPanel">
            <div>
                <button class="btn btn-link" @onclick="@(() => HideInput())"><h2>RheometerMeasurements</h2></button>
                <table class="table" hidden="@IsHidInputPanel">
                    <thead>
                        <tr>
                            <td>ShearRate (1/s)</td>
                            <td>ShearStress (Pa)</td>
                            <td></td>
                        </tr>
                    </thead>
                    <tbody>
                        @if (inputIterData1Count > 0)
                        {
                            @for (int j = 0; j < inputIterData1Count; j++)
                            {
                                var local_j = j; // defined because loop variables cannot be used directly in a lambda expression (see below)
                                var inputIterData1 = rheogramList[rheogramIdx].RheometerMeasurementList.ElementAt(j);
                                @if (inputIterData1 != null)
                                {
                                    @if (IsHidInputAdd && j == rowIndex)
                                    {
                                        <tr>
                                            <td>
                                                <input class="text" type="text" size="10" @bind="@updatedShearRate" />
                                            </td>
                                            <td>
                                                <input class="text" type="text" size="10" @bind="@updatedShearStress" />
                                            </td>
                                            <td align="right">
                                                @if (local_j > -1)
                                                {
                                                    <button class="btn btn-primary" @onclick="@(() => UpdateRheometerMeasurement(local_j))">Update</button>
                                                    <button class="btn btn-primary" @onclick="@(() => CancelRheometerMeasurement(local_j))">Cancel</button>
                                                }
                                            </td>
                                        </tr>
                                    }
                                    else
                                    {
                                        <tr>
                                            <td>
                                                <span class="label">@(inputIterData1.ShearRate)</span>
                                            </td>
                                            <td>
                                                <span class="label">@(inputIterData1.ShearStress)</span>
                                            </td>
                                            <td align="right">
                                                @if (!IsHidInputAdd)
                                                {
                                                    <button class="btn btn-primary" @onclick="@(() => EditRheometerMeasurement(local_j))">Edit</button>
                                                    <button class="btn btn-primary" @onclick="@(() => DeleteRheometerMeasurement(local_j))">Delete</button>
                                                }
                                            </td>
                                        </tr>
                                    }
                                }
                            }
                        }
                    </tbody>
                    <tfoot hidden="@IsHidInputAdd">
                        <tr>
                            <td>
                                <input class="text" type="text" size="10" @bind="@addedShearRate" />
                            </td>
                            <td>
                                <input class="text" type="text" size="10" @bind="@addedShearStress" />
                            </td>
                            <td align="right">
                                <button class="btn btn-primary" @onclick="@(() => AddRheometerMeasurement())">Add</button>
                                <button class="btn btn-primary" @onclick="@(() => CancelRheometerMeasurement())">Cancel</button>
                            </td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    }
}

@code {
    // default values
    private const double Rheogram_StdShearStress = .01; // this value is the same as in Model.Rheogram (could maybe be shared through ModelClientShared)

    // http client
    private HttpClient httpClient;

    private bool IsHidMainPanel = false;
    private bool IsHidSubPanel = true;
    private bool IsHidInputPanel = true;
    private bool IsHidInputAdd = false;
    private bool IsHidCalcPanel = true;

    // main data object
    private List<Rheogram> rheogramList;

    // temporary objects are used essentially to post or put modifications to the database
    private string addedRheogramName = null;
    private string addedRheogramDescr = null;
    private double? addedRheogramStdStress = Rheogram_StdShearStress;
    private double? addedShearRate = null;
    private double? addedShearStress = null;
    private string updatedRheogramName = null;
    private string updatedRheogramDescr = null;
    private double? updatedRheogramStdStress = Rheogram_StdShearStress;
    private double? updatedShearRate = null;
    private double? updatedShearStress = null;

    private int rheogramIdx = -1;
    private Guid rheogramID = Guid.Empty;
    private int rowIndex = -1; // the index of the row selected in the Input panel

    protected override async Task OnInitializedAsync()
    {
        try
        {
            string host = YPLCalibrationFromRheometer.WebApp.Client.Configuration.YPLCalibrationHostURL;
            logger.LogInformation("Trying to load Rheograms from client: " + host);
            SetHttpClient(host);
            rheogramList = await LoadRheograms();
        }
        catch (Exception ex)
        {
            httpClient = null;
            logger.LogError(ex, "Impossible to load Rheograms on initialization");
        }
    }

    private void SetHttpClient(string host)
    {
        httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri(host + "YPLCalibrationFromRheometer/api/");
        httpClient.DefaultRequestHeaders.Accept.Clear();
        httpClient.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    }

    private async Task<List<Rheogram>> LoadRheograms()
    {
        bool success = false;
        try
        {
            var a = await httpClient.GetAsync("Rheograms/");
            if (a.IsSuccessStatusCode)
            {
                Guid[] ids = null;
                string str = await a.Content.ReadAsStringAsync();
                if (!string.IsNullOrEmpty(str))
                {
                    ids = Newtonsoft.Json.JsonConvert.DeserializeObject<Guid[]>(str);
                }
                rheogramList = new List<Rheogram>();
                Rheogram rheogram = null;
                for (int i = 0; i < ids.Length; i++)
                {
                    a = await httpClient.GetAsync("Rheograms/" + ids[i].ToString());
                    if (a.IsSuccessStatusCode && a.Content != null)
                    {
                        str = await a.Content.ReadAsStringAsync();
                        if (!string.IsNullOrEmpty(str))
                        {
                            rheogram = JsonConvert.DeserializeObject<Rheogram>(str);
                            if (rheogram == null)
                                throw new NullReferenceException("Impossible to deserialize Rheograms string:" + str);
                            rheogramList.Add(rheogram);
                        }
                    }
                }
                if (rheogramList.Count != ids.Length)
                    throw new Exception("Inconsistent count of Rheogram-loaded IDs and loaded Rheograms.");
                success = true;
            }
            else
            {
                logger.LogWarning("Impossible to get Rheograms from controller");
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Impossible to load Rheograms");
        }
        if (success)
        {
            rheogramList.Sort((rheo1, rheo2) => rheo1.Name.CompareTo(rheo2.Name));
            logger.LogInformation("Loaded Rheograms successfully");
            return rheogramList;
        }
        else
        {
            logger.LogWarning("Impossible to load Rheograms");
            return null;
        }
    }

    private async void Edit(int idx)
    {
        if (rheogramList != null && idx >= 0 && idx < rheogramList.Count)
        {
            rheogramIdx = idx;
            updatedRheogramName = rheogramList[idx].Name;
            updatedRheogramDescr = rheogramList[idx].Description;
            updatedRheogramStdStress = rheogramList[idx].ShearStressStandardDeviation;
            rheogramID = rheogramList[idx].ID;
            IsHidMainPanel = true;
            IsHidSubPanel = false;

            await OnInitializedAsync();
            await InvokeAsync(() => { StateHasChanged(); });
        }
    }

    private async void Delete(int idx)
    {
        if (rheogramList != null && idx >= 0 && idx < rheogramList.Count && rheogramList[idx] != null && !rheogramList[idx].ID.Equals(System.Guid.Empty))
        {
            // delete Rheogram from database
            var a = await httpClient.DeleteAsync("Rheograms/" + rheogramList[idx].ID);
            if (a.IsSuccessStatusCode)
            {
                await OnInitializedAsync();
                await InvokeAsync(() => { StateHasChanged(); });
            }
            else
            {
                logger.LogWarning("Impossible to delete the selected Rheograms");
            }
        }
    }

    private async void Update(int idx)
    {
        if (rheogramList != null && idx >= 0 && idx < rheogramList.Count && !rheogramList[idx].ID.Equals(System.Guid.Empty) &&
            !string.IsNullOrEmpty(updatedRheogramName) && updatedRheogramStdStress != null && updatedRheogramStdStress > 0.0)
        {
            rheogramList[idx].Name = updatedRheogramName;
            rheogramList[idx].Description = updatedRheogramDescr;
            rheogramList[idx].ShearStressStandardDeviation = (double)updatedRheogramStdStress;

            // PUT Rheogram into the RheogramInputsTable (update of all YPLCalibrations which reference this Rheogram is performed)
            StringContent content = new StringContent(rheogramList[idx].GetJson(), Encoding.UTF8, "application/json");
            var a = await httpClient.PutAsync("Rheograms/" + rheogramList[idx].ID, content);
            if (a.IsSuccessStatusCode)
            {
                updatedRheogramName = null;
                updatedRheogramDescr = null;
                updatedRheogramStdStress = Rheogram_StdShearStress;

                IsHidMainPanel = false;
                IsHidSubPanel = true;
                rheogramIdx = -1;
                await OnInitializedAsync();
                await InvokeAsync(() => { StateHasChanged(); });
            }
            else
            {
                logger.LogWarning("Impossible to update the current Rheograms");
            }
        }
    }

    private void Cancel(int idx)
    {
        if (rheogramList != null && idx >= 0 && idx < rheogramList.Count)
        {
            IsHidMainPanel = false;
            IsHidSubPanel = true;
            rheogramIdx = -1;
        }
    }

    private async void Add()
    {
        if (!string.IsNullOrEmpty(addedRheogramName) && addedRheogramStdStress != null && addedRheogramStdStress > 0.0)
        {
            Rheogram addedRheogram = new Rheogram();
            addedRheogram.ID = Guid.NewGuid();
            addedRheogram.Name = addedRheogramName;
            addedRheogram.Description = addedRheogramDescr;
            addedRheogram.ShearStressStandardDeviation = (double)addedRheogramStdStress;

            // POST the Rheogram
            StringContent content = new StringContent(addedRheogram.GetJson(), Encoding.UTF8, "application/json");
            var a = await httpClient.PostAsync("Rheograms/", content);
            if (a.IsSuccessStatusCode)
            {
                addedRheogramName = null;
                addedRheogramDescr = null;
                addedRheogramStdStress = Rheogram_StdShearStress;

                await OnInitializedAsync();
                await InvokeAsync(() => { StateHasChanged(); });
            }
            else
            {
                logger.LogWarning("Impossible to add the current Rheogram");
            }
        }
    }

    private void Cancel()
    {
        // empty UI edit box
        addedRheogramName = null;
        addedRheogramDescr = null;
        addedRheogramStdStress = Rheogram_StdShearStress;
    }

    private void EditRheometerMeasurement(int rowIdx)
    {
        rowIndex = rowIdx;
        IsHidInputAdd = true;
        updatedShearRate = rheogramList[rheogramIdx].RheometerMeasurementList.ElementAt(rowIdx).ShearRate;
        updatedShearStress = rheogramList[rheogramIdx].RheometerMeasurementList.ElementAt(rowIdx).ShearStress;
    }

    private async void DeleteRheometerMeasurement(int rowIdx)
    {
        rowIndex = rowIdx;
        if (rheogramList[rheogramIdx] != null)
        {
            int iterData1Count = rheogramList[rheogramIdx].RheometerMeasurementList.Count;
            if (iterData1Count > 0)
            {
                // remove the RheometerMeasurement to be deleted
                RheometerMeasurement iterData1 = rheogramList[rheogramIdx].RheometerMeasurementList.ElementAt(rowIdx);
                if (iterData1 != null)
                {
                    // then update the database
                    if (rheogramList[rheogramIdx].RheometerMeasurementList.Remove(iterData1) && !rheogramID.Equals(Guid.Empty))
                    {
                        StringContent content = new StringContent(rheogramList[rheogramIdx].GetJson(), Encoding.UTF8, "application/json");
                        var a = await httpClient.PutAsync("Rheograms/" + rheogramID.ToString(), content);
                        if (a.IsSuccessStatusCode)
                        {
                            await OnInitializedAsync();
                            await InvokeAsync(() => { StateHasChanged(); });
                        }
                        else
                        {
                            logger.LogWarning("Impossible to update the current Rheogram");
                        }
                    }
                    else
                    {
                        logger.LogWarning("Impossible to remove the current RheometerMeasurement or the current Rheogram ID is empty");
                    }
                }
                else
                {
                    logger.LogWarning("Impossible to retrieve the selected RheometerMeasurement");
                }
            }
        }
    }

    private async void UpdateRheometerMeasurement(int rowIdx)
    {
        rowIndex = rowIdx;
        int iterData1Count = rheogramList[rheogramIdx].RheometerMeasurementList.Count;

        if (rheogramList[rheogramIdx] != null && !rheogramID.Equals(Guid.Empty) && iterData1Count > 0)
        {
            // collect UI data
            if (updatedShearRate.HasValue)
            {
                rheogramList[rheogramIdx].RheometerMeasurementList.ElementAt(rowIdx).ShearRate = (double)updatedShearRate; // else unchanged
                rheogramList[rheogramIdx].RheometerMeasurementList.ElementAt(rowIdx).ShearStress = (double)updatedShearStress; // else unchanged
            }

            // then refresh the UI
            updatedShearRate = null;
            updatedShearStress = null;
            IsHidInputAdd = false;
            rowIndex = -1;

            // finally update the Rheogram
            StringContent content = new StringContent(rheogramList[rheogramIdx].GetJson(), Encoding.UTF8, "application/json");
            var a = await httpClient.PutAsync("Rheograms/" + rheogramID.ToString(), content);
            if (a.IsSuccessStatusCode)
            {
                await OnInitializedAsync();
                await InvokeAsync(() => { StateHasChanged(); });
            }
            else
            {
                logger.LogWarning("Impossible to update the current Rheogram");
            }
        }
    }

    private void CancelRheometerMeasurement(int rowIdx)
    {
        // rowIndex is just used to make the distinction with the no-argument overload
        IsHidInputAdd = false;
        rowIndex = -1;
        // empty UI edit boxes
        updatedShearRate = null;
        updatedShearStress = null;
    }

    private async void AddRheometerMeasurement()
    {
        if (rheogramList[rheogramIdx] != null && !rheogramID.Equals(Guid.Empty))
        {
            RheometerMeasurement addedIterData1 = new RheometerMeasurement(); // attribute must be set separately because non-empty constructors cannot be passed through the ModelClientShared json conversion mechanism
            if (addedShearRate.HasValue)
            {
                addedIterData1.ShearRate = (double)addedShearRate; // else unchanged
                addedIterData1.ShearStress = (double)addedShearStress; // else unchanged
            }

            rheogramList[rheogramIdx].RheometerMeasurementList.Add(addedIterData1);

            // update UI
            addedShearRate = null;
            addedShearStress = null;

            // then update the database
            StringContent content = new StringContent(rheogramList[rheogramIdx].GetJson(), Encoding.UTF8, "application/json");
            var a = await httpClient.PutAsync("Rheograms/" + rheogramID.ToString(), content);
            if (a.IsSuccessStatusCode)
            {
                await OnInitializedAsync();
                await InvokeAsync(() => { StateHasChanged(); });
            }
            else
            {
                logger.LogWarning("Impossible to update the current Rheogram");
            }
        }
    }

    private void CancelRheometerMeasurement()
    {
        // empty UI edit boxes
        addedShearRate = null;
        addedShearStress = null;
    }

    private void HideInput()
    {
        IsHidInputPanel = !IsHidInputPanel;
    }

    private void HideCalc()
    {
        IsHidCalcPanel = !IsHidCalcPanel;
    }
    }